import React, { useState } from 'react';
import { useApp } from './AppContext.jsx';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card';
import { Button } from './components/ui/button';
import { Input } from './components/ui/input';
import { Label } from './components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './components/ui/select';
import { Badge } from './components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from './components/ui/alert-dialog';
import { Calendar, Clock, User, UserPlus, UserMinus, Settings, Search, X, FileText } from 'lucide-react';
import { formatDateTime, formatTime, getAvailableProctors } from './utils.js';

export default function ExamSchedule() {
  const { state, actions } = useApp();
  const [scheduleType, setScheduleType] = useState('exams'); // 'exams' or 'events'
  const [selectedExam, setSelectedExam] = useState(state.exams.length > 0 ? state.exams[0].id : '');
  const [selectedEvent, setSelectedEvent] = useState(state.events?.length > 0 ? state.events[0].id : '');
  const [startDateTime, setStartDateTime] = useState('');
  const [selectedSlot, setSelectedSlot] = useState(null);
  const [selectedVolunteerSlot, setSelectedVolunteerSlot] = useState(null);
  const [selectedProctors, setSelectedProctors] = useState([]);
  const [selectedVolunteers, setSelectedVolunteers] = useState([]);
  const [selectedSlots, setSelectedSlots] = useState([]);
  const [bulkAssignMode, setBulkAssignMode] = useState(false);
  const [removeAllDialogSlot, setRemoveAllDialogSlot] = useState(null);
  const [removeProctorDialog, setRemoveProctorDialog] = useState(null); // { slotId, proctorId, proctorName }
  const [removeVolunteerDialog, setRemoveVolunteerDialog] = useState(null); // { slotId, volunteerId, volunteerName }
  const [searchQuery, setSearchQuery] = useState('');
  const [proctorSearchQuery, setProctorSearchQuery] = useState('');
  const [volunteerSearchQuery, setVolunteerSearchQuery] = useState('');

  const currentExam = scheduleType === 'exams' ? state.exams.find(exam => exam.id === selectedExam) : null;
  const currentEvent = scheduleType === 'events' ? state.events?.find(event => event.id === selectedEvent) : null;
  
  const hasSlots = (scheduleType === 'exams' && currentExam && Array.isArray(currentExam.slots) && currentExam.slots.length > 0) || 
                  (scheduleType === 'events' && currentEvent && Array.isArray(currentEvent.slots) && currentEvent.slots.length > 0);
  
  const slots = scheduleType === 'exams' 
    ? (currentExam?.slots || [])
    : (currentEvent?.slots || []);

  const handleGenerateSlots = () => {
    if (!startDateTime) return;
    
    const startTime = new Date(startDateTime);
    
    if (scheduleType === 'exams') {
      actions.generateSlots(selectedExam, startTime);
    } else if (scheduleType === 'events') {
      actions.generateEventSlots(selectedEvent, startTime);
    }
  };

  const handleAssignProctors = (proctorIds) => {
    if (!selectedSlot || !proctorIds?.length) return;
    const unique = [...new Set(proctorIds)];
    unique.forEach((pid) => {
      actions.assignProctorToSlot(selectedExam, selectedSlot.id, pid);
    });
  };
  
  const handleAssignVolunteers = (volunteerId) => {
    if (!selectedVolunteerSlot || !volunteerId) return;
    actions.assignVolunteerToEventSlot(selectedEvent, selectedVolunteerSlot.id, volunteerId);
    setSelectedVolunteerSlot(null);
    setSelectedVolunteers([]);
  };

  const handleRemoveVolunteer = (slotId, volunteerId) => {
    actions.removeVolunteerFromEventSlot(selectedEvent, slotId, volunteerId);
  };

  const handleBulkAssignProctors = (proctorIds) => {
    if (!selectedSlots.length || !proctorIds?.length) return;
    const unique = [...new Set(proctorIds)];
    
    selectedSlots.forEach(slotId => {
      unique.forEach((pid) => {
        actions.assignProctorToSlot(selectedExam, slotId, pid);
      });
    });
    
    // Reset selections
    setSelectedSlots([]);
    setBulkAssignMode(false);
    setSelectedProctors([]);
  };

  const toggleSlotSelection = (slotId) => {
    setSelectedSlots(prev => 
      prev.includes(slotId) 
        ? prev.filter(id => id !== slotId)
        : [...prev, slotId]
    );
  };

  const selectAllSlots = () => {
    if (!currentExam?.slots) return;
    const unassignedSlots = currentExam.slots
      .filter(slot => slot.proctorIds.length === 0)
      .map(slot => slot.id);
    setSelectedSlots(unassignedSlots);
  };

  const clearSlotSelection = () => {
    setSelectedSlots([]);
  };

  const handleRemoveProctor = (slotId, proctorId) => {
    actions.removeProctorFromSlot(selectedExam, slotId, proctorId);
  };

  const handleRemoveAllProctors = (slotId, proctorIds) => {
    // Create a copy of the array to avoid modification during iteration
    const proctorsToRemove = [...proctorIds];
    proctorsToRemove.forEach(proctorId => {
      actions.removeProctorFromSlot(selectedExam, slotId, proctorId);
    });
  };

  const getSlotProctor = (proctorId) => {
    if (proctorId.startsWith("role-")) {
      const roleName = proctorId.replace("role-", "").replace("-", " ");
      return { id: proctorId, name: roleName };
    }
    return state.proctors.find(p => p.id === proctorId);
  };
  
  const getSlotVolunteer = (volunteerId) => {
    return state.volunteers.find(v => v.id === volunteerId);
  };

  const getAvailableProctorsForBulk = () => {
    if (!selectedSlots.length || !currentExam) return [];
    
    // Get slots that are selected for bulk assignment
    const slotsToCheck = currentExam.slots.filter(slot => selectedSlots.includes(slot.id));
    
    // Find proctors available for ALL selected slots
    return state.proctors.filter(proctor => {
      return slotsToCheck.every(slot => {
        const availableForSlot = getAvailableProctors(state.proctors, state.exams, slot.startTime);
        return availableForSlot.some(p => p.id === proctor.id);
      });
    });
  };

  const getAvailableProctorsForSlot = (slot) => {
    const baseAvailable = getAvailableProctors(state.proctors, state.exams, slot.startTime);
    // For single slot assignment, also show already assigned proctors as available
    // but mark them as already assigned
    const alreadyAssigned = slot.proctorIds || [];
    const alreadyAssignedProctors = alreadyAssigned
      .map(id => state.proctors.find(p => p.id === id))
      .filter(Boolean);
    
    // Combine available proctors with already assigned ones (removing duplicates)
    const combined = [...baseAvailable];
    alreadyAssignedProctors.forEach(assignedProctor => {
      if (!combined.some(p => p.id === assignedProctor.id)) {
        combined.push({ ...assignedProctor, alreadyAssigned: true });
      }
    });
    
    return combined;
  };
  
  const getAvailableVolunteers = () => {
    // All volunteers are available for all events for now
    // This could be enhanced to check for conflicts
    return state.volunteers || [];
  };

  // Helper function to filter slots based on search query
  const filterSlotsByQuery = (slot) => {
    if (!searchQuery) return true;
    
    const query = searchQuery.toLowerCase();
    
    // Get proctor/volunteer information for this slot
    let assignees = [];
    
    if (scheduleType === 'exams' && slot.proctorIds) {
      assignees = slot.proctorIds.map(id => getSlotProctor(id));
    } else if (scheduleType === 'events' && slot.volunteerIds) {
      assignees = slot.volunteerIds.map(id => getSlotVolunteer(id));
    }
    
    // Check if the query matches any assignee name or ID
    const assigneeMatch = assignees.some(assignee => 
      assignee?.name?.toLowerCase().includes(query) || 
      assignee?.id?.toLowerCase().includes(query)
    );
    
    // Check if query matches the time
    const timeStart = formatTime(slot.startTime).toLowerCase();
    const timeEnd = formatTime(slot.endTime).toLowerCase();
    const dateTimeStr = formatDateTime(slot.startTime).toLowerCase();
    const timeMatch = 
      timeStart.includes(query) || 
      timeEnd.includes(query) || 
      dateTimeStr.includes(query);
    
    return assigneeMatch || timeMatch;
  };

  const availableProctors = selectedSlot 
    ? selectedSlot.bulk 
      ? getAvailableProctorsForBulk()
      : getAvailableProctorsForSlot(selectedSlot)
    : [];
    
  const availableVolunteers = getAvailableVolunteers();

  const coordinatorRoles = [
    { id: 'role-coordinator', name: 'Coordinator' },
    { id: 'role-breaktime-coordinator', name: 'Breaktime Coordinator' }
  ];

  const allAssignableOptions = [...availableProctors, ...coordinatorRoles];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold text-foreground">Exam Schedule</h1>
        <p className="text-muted-foreground">
          Manage exam slots and assign proctors
        </p>
      </div>

      {/* Exam Selection */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Settings className="h-5 w-5" />
              <span>Schedule Management</span>
            </div>
            <Tabs value={scheduleType} onValueChange={setScheduleType} className="ml-auto">
              <TabsList>
                <TabsTrigger value="exams">Exams</TabsTrigger>
                <TabsTrigger value="events">Events</TabsTrigger>
              </TabsList>
            </Tabs>
          </CardTitle>
          <CardDescription>
            {scheduleType === 'exams' ? 'Choose an exam and generate time slots' : 'Manage event schedules and volunteer assignments'}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          {scheduleType === 'exams' ? (
            <div className="flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0">
              <div className="flex-1 space-y-2">
                <Label htmlFor="exam">Select Exam</Label>
                <Select
                  value={selectedExam}
                  onValueChange={setSelectedExam}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select an exam" />
                  </SelectTrigger>
                  <SelectContent>
                    {state.exams.map((exam) => (
                      <SelectItem key={exam.id} value={exam.id}>
                        {exam.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          ) : (
            <div className="flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0">
              <div className="flex-1 space-y-2">
                <Label htmlFor="event">Select Event</Label>
                <Select
                  value={selectedEvent}
                  onValueChange={setSelectedEvent}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select an event" />
                  </SelectTrigger>
                  <SelectContent>
                    {state.events?.map((event) => (
                      <SelectItem key={event.id} value={event.id}>
                        {event.name} ({new Date(event.date).toLocaleDateString()})
                      </SelectItem>
                    )) || []}
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
          
          {/* DateTime picker for both exams and events */}
          <div className="flex flex-col space-y-4 sm:flex-row sm:space-x-4 sm:space-y-0">
            <div className="flex-1 space-y-2">
              <Label htmlFor="start-datetime">Start Date & Time</Label>
              <Input
                id="start-datetime"
                type="datetime-local"
                value={startDateTime}
                onChange={(e) => setStartDateTime(e.target.value)}
                className="flex-1"
              />
            </div>
          </div>
          
          <div className="flex justify-end">
            <Button
              onClick={handleGenerateSlots}
              disabled={!startDateTime || (scheduleType === 'exams' ? !selectedExam : !selectedEvent)}
            >
              Generate {scheduleType === 'exams' ? 'Exam' : 'Event'} Slots
            </Button>
          </div>
        </CardContent>
      </Card>
      
      {hasSlots && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <User className="h-5 w-5" />
              <span>
                {scheduleType === 'exams' 
                  ? `Slot Management - ${currentExam?.name}` 
                  : `Event Slot Management - ${currentEvent?.name}`
                }
              </span>
            </CardTitle>
            <CardDescription>
              {scheduleType === 'exams' 
                ? 'Assign proctors to exam slots' 
                : 'Assign volunteers to event slots'
              }
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Search Input - Works for both exams and events */}
            <div className="mb-4">
              <div className="flex items-center space-x-2">
                <div className="relative flex-1">
                  <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input 
                    placeholder={scheduleType === 'exams' ? 
                      "Search slots by proctor name, ID, or time..." : 
                      "Search slots by volunteer name, ID, or time..."}
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-8 pr-8"
                  />
                  {searchQuery && (
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="absolute right-0 top-0 h-full px-3"
                      onClick={() => setSearchQuery('')}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              </div>
              {searchQuery && (
                <div className="mt-2 text-sm text-muted-foreground">
                  <span>
                    {slots.filter(filterSlotsByQuery).length} results for "{searchQuery}"
                  </span>
                </div>
              )}
            </div>
            
            {/* Bulk Assignment Controls - Exams only */}
            {scheduleType === 'exams' && (
              <div className="mb-6 p-4 bg-muted/50 rounded-lg border">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-medium">Bulk Assignment</h4>
                  <div className="flex items-center space-x-2">
                    <Button
                      variant={bulkAssignMode ? "default" : "outline"}
                      size="sm"
                      onClick={() => {
                        setBulkAssignMode(!bulkAssignMode);
                        if (!bulkAssignMode) {
                          setSelectedSlots([]);
                        }
                      }}
                    >
                      {bulkAssignMode ? "Exit Bulk Mode" : "Bulk Assign"}
                    </Button>
                  </div>
                </div>
                
                {bulkAssignMode && (
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-muted-foreground">
                        {selectedSlots.length} slot{selectedSlots.length !== 1 ? 's' : ''} selected
                      </span>
                      <div className="flex space-x-2">
                        <Button variant="outline" size="sm" onClick={selectAllSlots}>
                          Select All Unassigned
                        </Button>
                        <Button variant="outline" size="sm" onClick={clearSlotSelection}>
                          Clear Selection
                        </Button>
                        {selectedSlots.length > 0 && (
                          <Button 
                            size="sm"
                            onClick={() => setSelectedSlot({ bulk: true })}
                          >
                            Assign to Selected
                          </Button>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Slot Display */}
            <div className="space-y-4">
              {/* Exam Slots */}
              {scheduleType === 'exams' && currentExam?.slots
                .filter(filterSlotsByQuery)
                .map((slot, index) => {
                  const proctors = slot.proctorIds?.map(id => getSlotProctor(id)) || [];
                  const isAssigned = proctors.length > 0;

                  return (
                    <div
                      key={slot.id}
                      className={`flex items-center justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors ${
                        bulkAssignMode && selectedSlots.includes(slot.id) ? 'bg-primary/10 border-primary' : ''
                      }`}
                    >
                      <div className="flex items-center space-x-4">
                        {bulkAssignMode && (
                          <input
                            type="checkbox"
                            checked={selectedSlots.includes(slot.id)}
                            onChange={() => toggleSlotSelection(slot.id)}
                            disabled={isAssigned}
                            className="w-4 h-4"
                          />
                        )}
                        <div className="flex items-center justify-center w-8 h-8 bg-primary text-primary-foreground rounded-full text-sm font-medium">
                          {index + 1}
                        </div>
                        
                        <div>
                          <div className="flex items-center space-x-2">
                            <p className="font-medium">
                              {formatTime(slot.startTime)} - {formatTime(slot.endTime)}
                            </p>
                            {slot.isPreparation && (
                              <Badge variant="outline">Preparation</Badge>
                            )}
                          </div>
                          <p className="text-sm text-muted-foreground">
                            {formatDateTime(slot.startTime)}
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-2">
                        <div className="flex-1">
                          {isAssigned ? (
                            <div className="text-right">
                              {proctors.length > 0 ? (
                                <div className="space-y-1">
                                  {proctors.map(p => (
                                    <div key={p.id} className="flex items-center justify-end space-x-2 bg-muted/30 rounded px-2 py-1">
                                      <p className="font-medium text-sm">{p.name}</p>
                                      {!p.id.startsWith("role-") && (
                                        <span className="text-xs text-muted-foreground">({p.id})</span>
                                      )}
                                      <Button 
                                        variant="ghost" 
                                        size="sm" 
                                        className="h-5 w-5 p-0 hover:bg-destructive hover:text-destructive-foreground"
                                        onClick={() => setRemoveProctorDialog({ 
                                          slotId: slot.id, 
                                          proctorId: p.id, 
                                          proctorName: p.name 
                                        })}
                                      >
                                        <UserMinus className="h-3 w-3" />
                                      </Button>
                                    </div>
                                  ))}
                                </div>
                              ) : (
                                <p className="text-sm text-muted-foreground">No proctors assigned</p>
                              )}
                            </div>
                          ) : null}
                        </div>
                        
                        <div className="flex space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              setSelectedSlot(slot);
                              // Pre-select already assigned proctors when opening dialog
                              if (slot.proctorIds && slot.proctorIds.length > 0) {
                                setSelectedProctors(slot.proctorIds);
                              }
                            }}
                            className="flex items-center space-x-2"
                          >
                            <UserPlus className="h-4 w-4" />
                            <span>{isAssigned ? "Manage" : "Assign"}</span>
                          </Button>
                          
                          {isAssigned && (
                            <>
                              <Badge variant="secondary" className="text-xs">
                                {proctors.length} proctor{proctors.length !== 1 ? 's' : ''}
                              </Badge>
                              {proctors.length > 1 && (
                                <Button 
                                  variant="outline" 
                                  size="sm" 
                                  className="text-destructive"
                                  onClick={() => setRemoveAllDialogSlot(slot)}
                                >
                                  Clear All
                                </Button>
                              )}
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })
              }
              
              {/* Event Slots */}
              {scheduleType === 'events' && currentEvent?.slots?.map((slot, index) => {
                const volunteers = slot.volunteerIds?.map(id => 
                  state.volunteers.find(v => v.id === id)
                ).filter(Boolean) || [];
                const isAssigned = volunteers.length > 0;

                return (
                  <div
                    key={slot.id}
                    className="flex items-center justify-between p-4 border rounded-lg hover:bg-accent/50 transition-colors"
                  >
                    <div className="flex items-center space-x-4">
                      <div className="flex items-center justify-center w-8 h-8 bg-primary text-primary-foreground rounded-full text-sm font-medium">
                        {index + 1}
                      </div>
                      
                      <div>
                        <div className="flex items-center space-x-2">
                          <p className="font-medium">
                            {formatTime(slot.startTime)} - {formatTime(slot.endTime)}
                          </p>
                        </div>
                        <p className="text-sm text-muted-foreground">
                          {formatDateTime(slot.startTime)}
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-center">
                      {isAssigned ? (
                        <div className="flex flex-col items-end">
                          <div className="flex flex-wrap gap-2 justify-end">
                            {volunteers.map(volunteer => (
                              <Badge key={volunteer.id} variant="outline" className="flex items-center gap-1">
                                <User className="h-3 w-3" />
                                {volunteer.name}
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-5 w-5 p-0 hover:bg-destructive/20 rounded-full ml-1"
                                  onClick={() => handleRemoveVolunteer(slot.id, volunteer.id)}
                                >
                                  <X className="h-3 w-3" />
                                </Button>
                              </Badge>
                            ))}
                          </div>
                        </div>
                      ) : (
                        <Button 
                          variant="outline" 
                          size="sm" 
                          className="flex items-center space-x-1"
                          onClick={() => setSelectedVolunteerSlot(slot)}
                        >
                          <UserPlus className="h-4 w-4" />
                          <span>Assign Volunteer</span>
                        </Button>
                      )}
                    </div>
                  </div>
                );
              })}

              {/* Show message when no matching slots are found */}
              {searchQuery && slots.filter(filterSlotsByQuery).length === 0 && (
                <div className="p-8 text-center">
                  <p className="text-muted-foreground">No slots matching "{searchQuery}" found</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Proctor Assignment Dialog */}
      {selectedSlot && (
        <AlertDialog open={!!selectedSlot} onOpenChange={() => {
          setSelectedSlot(null);
          setSelectedProctors([]);
          setProctorSearchQuery('');
        }}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>
                {selectedSlot.bulk ? "Bulk Assign Proctors" : "Assign Proctor"}
              </AlertDialogTitle>
              <AlertDialogDescription>
                {selectedSlot.bulk 
                  ? `Select proctors for ${selectedSlots.length} selected slots`
                  : `Select a proctor for the slot: ${formatDateTime(selectedSlot.startTime)}`
                }
              </AlertDialogDescription>
            </AlertDialogHeader>
            
            <div className="space-y-4">
              {selectedSlot.bulk && (
                <div className="p-3 bg-muted rounded-lg">
                  <p className="text-sm font-medium mb-1">Selected Slots:</p>
                  <div className="text-sm text-muted-foreground max-h-20 overflow-y-auto">
                    {currentExam.slots
                      .filter(slot => selectedSlots.includes(slot.id))
                      .map((slot, index) => (
                        <div key={slot.id}>
                          {formatTime(slot.startTime)} - {formatTime(slot.endTime)}
                          {slot.isPreparation && " (Preparation)"}
                        </div>
                      ))
                    }
                  </div>
                </div>
              )}
              
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <Label>
                    {selectedSlot.bulk ? "Available for All Selected Slots" : "Available Proctors"}
                  </Label>
                  <div className="flex space-x-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        const filteredOptions = allAssignableOptions.filter(option => {
                          if (!proctorSearchQuery) return true;
                          const query = proctorSearchQuery.toLowerCase();
                          return option.name.toLowerCase().includes(query) || option.id.toLowerCase().includes(query);
                        });
                        const allIds = filteredOptions.map(option => option.id);
                        setSelectedProctors(allIds);
                      }}
                      className="text-xs"
                    >
                      Select All
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setSelectedProctors([])}
                      className="text-xs"
                    >
                      Clear All
                    </Button>
                  </div>
                </div>

                {/* Search Input for Proctors */}
                <div className="mb-2">
                  <div className="relative">
                    <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input 
                      placeholder="Search proctors by name or ID..."
                      value={proctorSearchQuery}
                      onChange={(e) => setProctorSearchQuery(e.target.value)}
                      className="pl-8 pr-8"
                    />
                    {proctorSearchQuery && (
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="absolute right-0 top-0 h-full px-3"
                        onClick={() => setProctorSearchQuery('')}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                  {proctorSearchQuery && (
                    <div className="mt-1 text-xs text-muted-foreground">
                      {allAssignableOptions.filter(option => {
                        const query = proctorSearchQuery.toLowerCase();
                        return option.name.toLowerCase().includes(query) || option.id.toLowerCase().includes(query);
                      }).length} results for "{proctorSearchQuery}"
                    </div>
                  )}
                </div>
                
                {/* Simple multi-select using checkboxes since our Select stub is single-select */}
                <div className="max-h-60 overflow-auto rounded-md border p-2">
                  <SelectTrigger>
                    <SelectValue placeholder="Choose proctors" />
                  </SelectTrigger>
                  <div className="mt-2 space-y-2">
                    {allAssignableOptions
                      .filter(option => {
                        if (!proctorSearchQuery) return true;
                        const query = proctorSearchQuery.toLowerCase();
                        return option.name.toLowerCase().includes(query) || option.id.toLowerCase().includes(query);
                      })
                      .map((option) => {
                        const checked = selectedProctors.includes(option.id);
                        const isAlreadyAssigned = !selectedSlot.bulk && selectedSlot.proctorIds?.includes(option.id);
                        const isRoleOption = option.id.startsWith('role-');
                        
                        return (
                          <label 
                            key={option.id} 
                            className={`flex items-center gap-2 text-sm p-2 rounded hover:bg-accent/50 ${
                              isAlreadyAssigned ? 'bg-blue-50 border border-blue-200' : ''
                            }`}
                          >
                          <input
                            type="checkbox"
                            checked={checked}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setSelectedProctors(prev => [...new Set([...prev, option.id])]);
                              } else {
                                setSelectedProctors(prev => prev.filter(id => id !== option.id));
                              }
                            }}
                          />
                          <div className="flex-1">
                            <span className="font-medium">{option.name}</span>
                            {!isRoleOption && (
                              <span className="text-muted-foreground ml-1">(ID: {option.id})</span>
                            )}
                            {isAlreadyAssigned && (
                              <Badge variant="outline" className="ml-2 text-xs">
                                Already Assigned
                              </Badge>
                            )}
                          </div>
                        </label>
                      );
                    })}
                  </div>
                </div>
                
                {/* Show message when no matching proctors are found */}
                {proctorSearchQuery && 
                  allAssignableOptions.filter(option => {
                    const query = proctorSearchQuery.toLowerCase();
                    return option.name.toLowerCase().includes(query) || option.id.toLowerCase().includes(query);
                  }).length === 0 && (
                  <div className="p-4 text-center">
                    <p className="text-muted-foreground">No proctors matching "{proctorSearchQuery}" found</p>
                  </div>
                )}
                
                {selectedProctors.length > 0 && (
                  <div className="mt-2 p-2 bg-muted rounded text-sm">
                    <strong>{selectedProctors.length}</strong> proctor{selectedProctors.length !== 1 ? 's' : ''} selected
                    {!selectedSlot.bulk && selectedSlot.proctorIds?.length > 0 && (
                      <span className="text-muted-foreground ml-2">
                        (including {selectedSlot.proctorIds.filter(id => selectedProctors.includes(id)).length} already assigned)
                      </span>
                    )}
                  </div>
                )}
              </div>
              
              {availableProctors.length === 0 && !proctorSearchQuery && (
                <p className="text-sm text-muted-foreground">
                  {selectedSlot.bulk 
                    ? "No proctors are available for all selected time slots. Try selecting fewer slots or check for scheduling conflicts."
                    : "No available proctors for this time slot. All proctors may be assigned to other slots at the same time."
                  }
                </p>
              )}
            </div>

            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => {
                setSelectedSlot(null);
                setSelectedProctors([]);
              }}>
                Cancel
              </AlertDialogCancel>
              <AlertDialogAction 
                onClick={() => {
                  if (selectedProctors.length) {
                    if (selectedSlot.bulk) {
                      handleBulkAssignProctors(selectedProctors);
                    } else {
                      handleAssignProctors(selectedProctors);
                    }
                    setSelectedSlot(null);
                    setSelectedProctors([]);
                  }
                }}
                disabled={!selectedProctors.length}
              >
                {selectedSlot.bulk ? "Assign to All Selected" : "Assign Selected"}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}

      {/* Volunteer Assignment Dialog */}
      {selectedVolunteerSlot && (
        <AlertDialog open={!!selectedVolunteerSlot} onOpenChange={() => {
          setSelectedVolunteerSlot(null);
          setSelectedVolunteers([]);
          setVolunteerSearchQuery('');
        }}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>
                Assign Volunteer
              </AlertDialogTitle>
              <AlertDialogDescription>
                Select a volunteer for this event slot: {formatDateTime(selectedVolunteerSlot.startTime)}
              </AlertDialogDescription>
            </AlertDialogHeader>
            
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Available Volunteers</Label>
                
                {/* Search Input for Volunteers */}
                <div className="mb-2">
                  <div className="relative">
                    <Search className="absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                    <Input 
                      placeholder="Search volunteers by name or skills..."
                      value={volunteerSearchQuery}
                      onChange={(e) => setVolunteerSearchQuery(e.target.value)}
                      className="pl-8 pr-8"
                    />
                    {volunteerSearchQuery && (
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="absolute right-0 top-0 h-full px-3"
                        onClick={() => setVolunteerSearchQuery('')}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                </div>
                
                {/* Volunteer list */}
                <div className="max-h-60 overflow-auto rounded-md border p-2">
                  {availableVolunteers
                    .filter(volunteer => {
                      if (!volunteerSearchQuery) return true;
                      const query = volunteerSearchQuery.toLowerCase();
                      return (
                        volunteer.name.toLowerCase().includes(query) || 
                        volunteer.skills?.toLowerCase().includes(query) ||
                        volunteer.id.toLowerCase().includes(query)
                      );
                    })
                    .map((volunteer) => (
                      <div 
                        key={volunteer.id} 
                        className="flex items-center justify-between p-2 rounded hover:bg-accent/50 cursor-pointer"
                        onClick={() => handleAssignVolunteers(volunteer.id)}
                      >
                        <div>
                          <div className="font-medium">{volunteer.name}</div>
                          <div className="text-xs text-muted-foreground">{volunteer.skills || 'No specific skills'}</div>
                        </div>
                        <Button size="sm" className="ml-2">Assign</Button>
                      </div>
                    ))
                  }
                  
                  {/* Empty state */}
                  {availableVolunteers.filter(volunteer => {
                    if (!volunteerSearchQuery) return true;
                    const query = volunteerSearchQuery.toLowerCase();
                    return (
                      volunteer.name.toLowerCase().includes(query) || 
                      volunteer.skills?.toLowerCase().includes(query) ||
                      volunteer.id.toLowerCase().includes(query)
                    );
                  }).length === 0 && (
                    <div className="p-4 text-center">
                      <p className="text-muted-foreground">No volunteers found matching your search</p>
                    </div>
                  )}
                </div>
              </div>
            </div>

            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => setSelectedVolunteerSlot(null)}>
                Cancel
              </AlertDialogCancel>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}

      {/* Remove Single Proctor Dialog */}
      {removeProctorDialog && (
        <AlertDialog open={!!removeProctorDialog} onOpenChange={() => setRemoveProctorDialog(null)}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Remove Proctor</AlertDialogTitle>
              <AlertDialogDescription>
                Are you sure you want to remove {removeProctorDialog.proctorName} from this slot?
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => setRemoveProctorDialog(null)}>
                Cancel
              </AlertDialogCancel>
              <AlertDialogAction 
                onClick={() => {
                  handleRemoveProctor(removeProctorDialog.slotId, removeProctorDialog.proctorId);
                  setRemoveProctorDialog(null);
                }}
                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
              >
                Remove
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}

      {/* Remove All Proctors Dialog */}
      {removeAllDialogSlot && (
        <AlertDialog open={!!removeAllDialogSlot} onOpenChange={() => setRemoveAllDialogSlot(null)}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Remove All Proctors</AlertDialogTitle>
              <AlertDialogDescription>
                Are you sure you want to remove all {removeAllDialogSlot.proctorIds?.length || 0} proctors from this slot?
                <br />
                <span className="text-sm font-medium mt-2 block">
                  Time: {formatTime(removeAllDialogSlot.startTime)} - {formatTime(removeAllDialogSlot.endTime)}
                </span>
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => setRemoveAllDialogSlot(null)}>
                Cancel
              </AlertDialogCancel>
              <AlertDialogAction 
                onClick={() => {
                  handleRemoveAllProctors(removeAllDialogSlot.id, removeAllDialogSlot.proctorIds);
                  setRemoveAllDialogSlot(null);
                }}
                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
              >
                Remove All
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}

      {/* Instructions */}
      {!hasSlots && (
        <Card>
          <CardHeader>
            <CardTitle>Getting Started</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3 text-sm text-muted-foreground">
              {scheduleType === 'exams' ? (
                <>
                  <p>1. Select an exam from the dropdown above</p>
                  <p>2. Choose the exam start date and time</p>
                  <p>3. Click "Generate Exam Slots" to create time slots</p>
                  <p>4. Assign proctors to each slot</p>
                  <p className="text-xs mt-4 p-3 bg-muted rounded">
                    <strong>Note:</strong> Slots start 1 hour before the exam for preparation. 
                    Exam00, Exam01, and Exam02 have 5 slots each (1 prep + 4 exam hours). 
                    Exam03 has 9 slots (1 prep + 8 exam hours).
                  </p>
                </>
              ) : (
                <>
                  <p>1. Select an event from the dropdown above</p>
                  <p>2. Choose the event start date and time</p>
                  <p>3. Click "Generate Event Slots" to create time slots</p>
                  <p>4. Assign volunteers to each slot</p>
                </>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}